$retina-media-query: "only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (   min--moz-device-pixel-ratio: 2),
	only screen and (     -o-min-device-pixel-ratio: 2/1),
	only screen and (        min-device-pixel-ratio: 2),
	only screen and (                min-resolution: 192dpi),
	only screen and (                min-resolution: 2dppx)";

$web: sprite-map("sprite/*.png", $spacing: 20px, $layout: vertical);
$web2x: sprite-map("sprite/*.png", $spacing: 20px, $layout: vertical);

$sprites-retina: $web $web2x;

@mixin sprite($sprites: null, $name: null, $fontSize: $base-font-size,
$retina: true, $retinaSprites: null,
$hover: false, $hoverName: '#{$name}_hover', $hoverSelector: '&:hover', $clearHover: false,
$offsetX: 0, $offsetY: 0, $spreadX: 0, $spreadY: 0,
$withDimensions: false, $widthOnly: false, $minWidth: false, $minHeight: false,
$imageReplacement: false, $inline: false, $lineHeight: false,
$selector: false, $pseudoSelector: false, $parent: false, $parentPosition: relative,
$absolute: true, $position: left, $vPosition: top, $padding: true,
$outside: false,
$clearBg: true) {
	@if $retina and type-of($sprites) == string {
		$name: $sprites;
		$sprites: nth($sprites-retina, 1);
		$retinaSprites: nth($sprites-retina, 2);
	}
	@if not $sprites or type-of($sprites) == string {
		@warn 'You must specify sprite-map and sprite name!';
	}
	$currentSprite: sprite-file($sprites, $name);

	$spriteWidth: image-width($currentSprite);
	$spriteHeight: image-height($currentSprite);

	$offsetX: strip-units($offsetX);
	$offsetY: strip-units($offsetY);
	$spreadX: strip-units($spreadX);
	$spreadY: strip-units($spreadY);

	@if $minHeight != false {
		@if unit($minHeight) == em {
			$minHeight: strip-units($minHeight) * $fontSize;
		}
		@if ($minHeight > $spriteHeight) {
			$offsetY: ($minHeight - $spriteHeight) ;
			$spriteHeight: $minHeight;
		}
	}

	@if $minWidth != false {
		@if unit($minWidth) == em {
			$minWidth: strip-units($minWidth) * $fontSize;
		}
		@if ($minWidth > $spriteWidth) {
			$offsetX: ($minWidth - $spriteWidth) ;
			$spriteWidth: $minWidth;
		}
	}

	@if $imageReplacement {
		$withDimensions: true;
		@include hide-text;
	}

	@if $withDimensions {
		display: if($inline, inline-block, block);

		width: em($spriteWidth, $fontSize);
		@if not $widthOnly {
			height: em($spriteHeight, $fontSize);
		}

		@if $lineHeight {
			line-height: em($spriteHeight, $fontSize);
		}
	}

	$selector: if($selector != false, $selector, '&');

	@if ($selector != '&' and $parentPosition) {
		position: $parentPosition;
	}

	$sPos: sprite-position($sprites, $name, $offsetX, $offsetY);
	$shPos: sprite-position($sprites, $name, $offsetX, $offsetY);
	$srPos: sprite-position($sprites, $name, $offsetX, $offsetY);
	$shrPos: sprite-position($sprites, $name, $offsetX, $offsetY);

	@if $hover {
		$shPos: sprite-position($sprites, $hoverName, $offsetX, $offsetY);
	}

	@if $retina {
		$srPos: sprite-position($retinaSprites, $name, $offsetX * 2, $offsetY * 2);

		@if $hover {
			$shrPos: sprite-position($retinaSprites, $hoverName, $offsetX * 2, $offsetY * 2);
		}
	}

	#{$selector} {
		@if $selector == '&:before' or $selector == '&:after' {
			$pseudoSelector: true;
		}

		@if $pseudoSelector {
			content: "";
		}

		@if $selector != '&' {
			height: em($spriteHeight, $fontSize);
			width: em($spriteWidth, $fontSize);

			@if $absolute {
				position: absolute;
				#{$vPosition}: if($spreadY != 0, em($spreadY * 1px / 2, $fontSize), 0);

				@if $outside {
					#{$position}: em(-1 * ($spriteWidth + $spreadX * 1px), $fontSize);
				} @else {
					#{$position}: em(0 * 1px + $spreadX, $fontSize);
				}
			} @else {
				display: if($inline, inline-block, block);

				@if $padding {
					padding-#{$position}: em($spriteWidth, $fontSize);
				}
			}
		}

		@if $clearBg {
			background: none;
		}

		@include background-size(em(floor(image-width(sprite-path($sprites))), $fontSize) em(floor(image-height(sprite-path($sprites))), $fontSize));

		background: {
			repeat: no-repeat;
			image: sprite-url($sprites);
			position: em(nth($sPos, 1), $fontSize)  em(nth($sPos, 2), $fontSize);
		}

		@if $retina {
			$currentRetinaSprite: sprite-file($retinaSprites, $name);

			@media #{unquote($retina-media-query)} {
				background: {
					image: sprite-url($retinaSprites);
					position: em(nth($srPos, 1), $fontSize)  em(nth($srPos, 2), $fontSize);
				}

				@include background-size(em(floor(image-width(sprite-path($retinaSprites))), $fontSize) auto);
			}
		}
	} 

	$_hoverSelectors: join(unquote($hoverSelector), (), comma);
	$hoverSelectors: ();

	@each $s in $_hoverSelectors {
		@if $parent {
			$hoverSelectors: append($hoverSelectors, unquote('#{$s} #{$selector}'));
		} @else if $selector == '&:before' {
			$hoverSelectors: append($hoverSelectors, unquote('#{$s}:before'));
		} @else if $selector == '&:after' {
			$hoverSelectors: append($hoverSelectors, unquote('#{$s}:after'));
		} @else {
			$hoverSelectors: append($hoverSelectors, unquote($s));
		}
	}

	@if $hover {
		#{$hoverSelectors} {
			background-position: /*em(*/nth($shPos, 1) nth($shPos, 2)/*, $fontSize)*/;

			@if $retina {
				@media #{unquote($retina-media-query)} {
					background: {
						image: sprite-url($retinaSprites);
						position: /*em(*/floor(nth($shrPos, 1) ) floor(nth($shrPos, 2) )/*, $fontSize)*/;
					}
				}
			}
		}
	} @else if $clearHover { 
		#{$hoverSelectors} {
			background-position: /*em(*/nth($sPos, 1) nth($sPos, 2)/*, $fontSize)*/;

			@if $retina {
				@media #{unquote($retina-media-query)} {
					background: {
						image: sprite-url($retinaSprites);
						position: /*em(*/floor(nth($srPos, 1) ) floor(nth($srPos, 2) )/*, $fontSize)*/;
					}
				}
			}
		}
	}
}